-- List all details of actors
SELECT * FROM actor;

-- -List all customer information from DB.
SELECT * FROM customer;

-- List different countries.
SELECT country FROM country;

-- Display all active customers
SELECT customer_id, first_name, last_name, active 
FROM customer
WHERE active = 1;

-- List of all rental IDs for customer with ID 1.
SELECT rental_id,customer_id FROM rental
WHERE customer_id = 1;

-- Display all the films whose rental duration is greater than 5 
SELECT film_id, title, rental_duration
 FROM  film
 WHERE rental_duration > 5;
 
 --  List the total number of films whose replacement cost is greater than $15 and less than $20.
 SELECT count(*) total_film_15to20$
 FROM film
 WHERE replacement_cost >18 and replacement_cost<20 ;
 
  -- Display the count of unique first names of actors
  SELECT count(distinct first_name) unique_firstname 
  FROM actor;
  
  -- Display the first 10 records from the customer table 
  SELECT * FROM customer
  LIMIT 10 ;
  
   -- Display the first 3 records from the customer table whose first name starts with ‘b’.
   SELECT * FROM customer
   WHERE first_name LIKE 'b%'
   LIMIT 3;
   
   -- Display the names of the first 5 movies which are rated as ‘G’
   SELECT film_id, title, rating 
   FROM film
   WHERE rating = 'G'
   LIMIT 5;
 
 -- Find all customers whose first name starts with "a".
 SELECT * FROM customer
	WHERE first_name LIKE 'a%';
   
   --  Find all customers whose first name ends with "a".
    SELECT * FROM customer
	WHERE first_name LIKE '%a';
   
   -- Display the list of first 4 cities which start and end with ‘a
   SELECT * FROM  city
   WHERE city LIKE 'a%' AND city LIKE '%a';
   
   --  Find all customers whose first name have "NI" in any position.
	SELECT * FROM customer
	WHERE first_name LIKE '%ni%' ;
    
    -- Find all customers whose first name have "r" in the second position.
    SELECT * FROM customer
	WHERE first_name LIKE '_r%';
    
    -- Find all customers whose first name starts with "a" and are at least 5 characters in length.
	SELECT * FROM customer
	WHERE first_name LIKE 'a%' and length(first_name)>= 5 ;
    
    -- Find all customers whose first name starts with "a" and ends with "o".
    SELECT * FROM  customer
   WHERE first_name LIKE 'a%' AND first_name LIKE '%o';
   
   -- Get the films with pg and pg-13 rating using IN operator.
   SELECT * FROM film
   WHERE rating in ('PG', 'PG-13');
   
   -- Get the films with length between 50 to 100 using between operator.
   SELECT * FROM film
   where length BETWEEN 50 AND 100 ;
   
   --  Get the top 50 actors using limit operator
   SELECT * FROM actor
	LIMIT 50 ;
    
    -- Get the distinct film ids from inventory table
    SELECT count(distinct film_id) distnict_flim_nos
    FROM inventory;
    
    -- Question 1: Retrieve the total number of rentals made in the Sakila database.
    SELECT count(*) total_rental
    FROM rental;
    
    -- Find the average rental duration (in days) of movies rented from the Sakila database.
    SELECT avg(datediff(return_date,rental_date)) as avg_rentalduration
    FROM rental;
    
    -- Display the first name and last name of customers in uppercase.
    SELECT 
    UPPER(first_name) FIRST_NAME,
    UPPER(last_name) LAST_NAME 
    FROM customer;
    
    -- Extract the month from the rental date and display it alongside the rental ID.
    SELECT rental_id, MONTH(rental_date)  rentalMonth
	FROM rental;
    
    -- Retrieve the count of rentals for each customer (display customer ID and the count of rentals)
    SELECT customer_id, 
    count(rental_id) no_of_rentals
    FROM  rental
    group by customer_id;
    
    -- Find the total revenue generated by each store.
    SELECT s.store_id , 
    sum(p.amount) as total_revenue
    FROM payment p
    JOIN staff s 
    on s.staff_id = p.staff_id
    group by s.store_id;
    
    -- Determine the total number of rentals for each category of movies
    SELECT c.name category, f.title movie_name, count(r.rental_id) total_number_rents
    FROM film_category fc 
    JOIN film f 
    ON f.film_id = fc.film_id
    JOIN inventory i 
    ON  f.film_id = i.film_id
    JOIN rental r 
    on i.inventory_id = r.inventory_id
    JOIN category C 
    ON fc.category_id = c.category_id
    group by c.name, f.title;
    
    -- Find the average rental rate of movies in each language.
 SELECT l.language_id,
 round(avg(rental_rate),2) average_rentalrate
 FROM language l 
 JOIN film f 
 on f.language_id = l.language_id
 group by l.language_id;
 
    -- Display the title of the movie, customer s first name, and last name who rented it
    SELECT  r.customer_id, c.first_name, c.last_name,f.title
    FROM film f
    JOIN inventory i 
    ON i.film_id = f.film_id
    JOIN rental r 
    ON r.inventory_id = i.inventory_id
    JOIN customer c 
    ON c.customer_id = r.customer_id
    ORDER BY c.customer_id;
    
    -- Retrieve the names of all actors who have appeared in the film "Gone with the Wind."
    SELECT f.title, a.first_name , a.last_name
    FROM actor a 
    JOIN film_actor fa 
    ON fa.actor_id = a.actor_id
    JOIN film f
    ON f.film_id  = fa.film_id
    WHERE title like "Gone with the Wind";
    
-- Retrieve the customer names along with the total amount they've spent on rental
SELECT r.customer_id,concat(first_name,' ',c.last_name) Full_name, sum(p.amount) total_amount
FROM customer c
JOIN rental r
ON r.customer_id = c.customer_id
JOIN payment p 
ON p.rental_id = r.rental_id
GROUP BY r.customer_id;

-- List the titles of movies rented by each customer in a particular city (
SELECT c.customer_id,c.first_name,c.last_name,f.title
FROM customer c
JOIN payment p 
ON c.customer_id = p.customer_id
JOIN rental r 
ON r.rental_id = p.rental_id
JOIN store s  
ON s. store_id = c.store_id
JOIN address ad 
ON ad.address_id = s.address_id
JOIN city ci 
ON ci.city_id = ad.city_id
JOIN inventory i  
ON i.store_id = s.store_id
JOIN  film f 
ON f.film_id = i.film_id
group by  c.customer_id,c.first_name,c.last_name,f.title;

--  Display the top 5 rented movies along with the number of times they've been rented.
SELECT f.film_id ,f.title, count(rental_id) no_times_rented
FROM film f 
join inventory i 
ON i.film_id = f.film_id
JOIN rental r
ON r.inventory_id = i. inventory_id
group by f.film_id, f.title
limit 5 ;

-- Determine the customers who have rented movies from both stores (store ID 1 and store ID 2)
SELECT i.store_id, count(c.customer_id) 
FROM rental r
JOIN customer c
ON c.customer_id = r.customer_id
JOIN inventory i 
ON i.inventory_id = r.inventory_id
group by i.store_id;

-- Rank the customers based on the total amount they've spent on rentals.
select p.customer_id,concat(c.first_name,' ',c.last_name) Full_name, sum(amount) Total_amount,
rank() over( order by sum(amount) desc ) Rankofcustomer
from payment p
join customer c
on c.customer_id = p.customer_id 
group by p.customer_id;

 -- Calculate the cumulative revenue generated by each film over time
select i.film_id, f.title,
sum(p.amount) over(order by p.payment_date) cumulative_revenue
from film f 
join inventory i
on i.film_id = f.film_id
join rental r 
on r.inventory_id = i.inventory_id
join payment p 
on p.rental_id = r.rental_id;

-- Determine the average rental duration for each film, considering films with similar lengths.

 select title, rental_duration,
 avg(rental_duration) over (partition by rental_duration) avg_rental_duration_for_each_film
 from film;
 
 --  Identify the top 3 films in each category based on their rental counts
 
 select fc.category_id, c.name,f.title, 
 count(r.rental_id) over(partition by fc.category_id  ) top_film_rental_counts
 from film f
 join inventory i 
 on i.film_id = f.film_id
 join rental r
 on r.inventory_id = i.inventory_id
 join film_category fc
 on fc.film_id = f.film_id
 join category c 
 on c.category_id = fc.category_id
order by count(r.rental_id) over(partition by fc.category_id ) desc;

-- Calculate the difference in rental counts between each customer's total rentals and the average rentals across all customers.
	SELECT
    c.customer_id ,
    COUNT(r.rental_id) AS total_rentals,
    AVG(COUNT(r.rental_id)) OVER () AS avg_rentals,
    (COUNT(r.rental_id) - AVG(COUNT(r.rental_id)) OVER ()) AS rental_difference
	FROM
    customer c
	LEFT JOIN
    rental r ON c.customer_id = r.customer_id
	GROUP BY
    c.customer_id;
    
    --  Find the monthly revenue trend for the entire rental store over time.
select payment_id,amount,monthname(payment_date) month,
sum(amount) over(partition by month(payment_date) order by month(payment_date)) monthlyrevenue  
from  payment ;

--  Identify the customers whose total spending on rentals falls within the top 20% of all customers
select * from
(
SELECT 	customer_id,
sum(amount) totalspending,
ntile(5) over() ranking
FROM payment
 group by customer_id 
)t
where ranking = 1
order by totalspending  desc;

--  Calculate the running total of rentals per category, ordered by rental count.
WITH category_rentals AS (
    SELECT 
        c.name AS category_name,
        COUNT(r.rental_id) AS rental_count
    FROM 
        rental r
    JOIN inventory i ON r.inventory_id = i.inventory_id
    JOIN film f ON i.film_id = f.film_id
    JOIN film_category fc ON f.film_id = fc.film_id
    JOIN category c ON fc.category_id = c.category_id
    GROUP BY 
        c.name
)
SELECT
    category_name,
    rental_count,
    SUM(rental_count) OVER (ORDER BY rental_count DESC) AS running_total
FROM
    category_rentals
ORDER BY
    rental_count DESC;

  --  Find the films that have been rented less than the average rental count for their respective categories.
 WITH category_avg_rentals AS (
    SELECT 
        fc.category_id,
        c.name AS category_name,
        AVG(COUNT(r.rental_id)) OVER (PARTITION BY fc.category_id) AS avg_rentals_per_category
    FROM 
        film f
    JOIN film_category fc ON f.film_id = fc.film_id
    JOIN category c ON fc.category_id = c.category_id
    JOIN inventory i ON f.film_id = i.film_id
    LEFT JOIN rental r ON i.inventory_id = r.inventory_id
    GROUP BY 
        fc.category_id, c.name, f.film_id
),
film_rentals AS (
    SELECT 
        f.film_id,
        f.title,
        fc.category_id,
        COUNT(r.rental_id) AS film_rental_count
    FROM 
        film f
    JOIN film_category fc ON f.film_id = fc.film_id
    JOIN inventory i ON f.film_id = i.film_id
    LEFT JOIN rental r ON i.inventory_id = r.inventory_id
    GROUP BY 
        f.film_id, f.title, fc.category_id
)
SELECT 
    fr.title AS film_title,
    fr.film_rental_count,
    car.category_name,
    car.avg_rentals_per_category
FROM 
    film_rentals fr
JOIN 
    category_avg_rentals car ON fr.category_id = car.category_id
WHERE 
    fr.film_rental_count < car.avg_rentals_per_category
ORDER BY 
    car.category_name, fr.film_rental_count;
    
    -- Identify the top 5 months with the highest revenue and display the revenue generated in each month
    
  SELECT 
    DATE_FORMAT(r.rental_date, '%Y-%m') AS rental_month,
    SUM(p.amount) AS total_revenue
FROM 
    rental r
JOIN 
    payment p ON r.rental_id = p.rental_id
GROUP BY 
    rental_month
ORDER BY 
    total_revenue DESC
LIMIT 5;

--  First Normal Form (1NF): a. Identify a table in the Sakila database that violates 1NF. Explain how you
-- would normalize it to achieve 1NF.
-- The special_features column in the film table contains a list of features as a single value, violating 1NF.
-- Create a new table, say film_special_feature, that will store each special feature individually.

-- . Choose a table in Sakila and describe how you would determine whether it is in 2NF. 
-- If it violates 2NF, explain the steps to normalize it.
--  Table film_actor violates 2NF
-- Before considering 2NF, we confirm that the table adheres to 1NF (each column contains atomic values, and there are no repeating groups).
-- Be in 1NF.
-- Have no partial dependencies—meaning non-key attributes should not depend on just part of a composite key; 
-- they must depend on the whole primary key.

--  Identify a table in Sakila that violates 3NF. Describe the transitive dependencies present and outline the steps to normalize the table to 3NF.
-- In the Sakila database, the address table provides an example where Third Normal Form (3NF) may be violated
-- In the final structure:
-- The address table references only city_id.
-- The city table references country_id.
-- Each table now satisfies 3NF, as non-key attributes depend only on primary keys directly without any transitive dependencies.

-- Write a query using a CTE to retrieve the distinct list of actor names and the number of films they have acted in from the actor and film_actor tables.
 WITH listofactor AS
 (
 SELECT 
 actor_id,
 count(film_id) no_film
 FROM film_actor fa
 GROUP BY actor_id
 )
 SELECT 
 a.actor_id,
 concat(a.first_name ,' ',a.last_name) Name_actor,
 lf.no_film
 FROM actor a
 LEFT JOIN listofactor lf
 ON lf.actor_id = a.actor_id;

-- a. Create a CTE that combines information from the film and language tables to display the film title, language name, and rental rate
WITH film_language AS 
(
SELECT language_id,
title,
rental_rate
FROM film
)
SELECT 
fl.title Movie_Title,
fl.rental_rate,
l.name AS Language
FROM film_language fl
JOIN language l 
ON l.language_id = fl.language_id;

--  Write a query using a CTE to find the total revenue generated by each customer (sum of payments) 
-- from the customer and payment tables

WITH totalrevenue AS
(
SELECT customer_id,
SUM(amount) Total_revenue 
 FROM payment
 GROUP BY customer_id
)
SELECT 
c.customer_id,
concat(c.first_name, ' ', c.last_name) Customer_name,
tr.Total_revenue 
FROM totalrevenue tr 
JOIN customer c
ON c.customer_id = tr.customer_id;

-- . Utilize a CTE with a window function to rank films based on their rental duration from the film table.
WITH Rank_film AS 
(
SELECT film_id,
title AS Movie_title,
rental_duration,
DENSE_RANK() OVER(ORDER BY rental_duration DESC) Rank_of_film
FROM film
)
SELECT film_id,
 Movie_title,
 rental_duration,
  Rank_of_film
FROM Rank_film;

-- Create a CTE to list customers who have made more than two rentals, and then join this CTE with the 
-- customer table to retrieve additional customer details
WITH COUNT2RENT AS
(
 SELECT 
 customer_id,
 count(rental_id) NoOfrental
 FROM  rental
 GROUP BY customer_id
 )
 SELECT c.customer_id,
	concat(c.first_name,' ', c.last_name) Customer_name,
	c.email,
	c.address_id,
	c.active,
	cr.NoOfrental
FROM COUNT2RENT cr 
JOIN  customer c
ON c.customer_id = cr.customer_id
WHERE cr.NoOfrental > 2
ORDER BY cr.NoOfrental;
 
 
 --  Write a query using a CTE to find the total number of rentals made each month, considering the rental_date from the rental table
WITH TOTALRENTS AS
(
SELECT 
DATE_FORMAT(rental_date, '%M') Months,
SUM(rental_id) Total_rent
FROM rental
GROUP BY Months
)
SELECT * 
FROM TOTALRENTS
ORDER BY Total_rent DESC;

-- Create a CTE to generate a report showing pairs of actors who have appeared in the same film together, using the film_actor table.
WITH ActorPairs AS (
    SELECT 
        fa1.actor_id AS actor1_id,
        fa2.actor_id AS actor2_id,
        fa1.film_id
    FROM 
        film_actor fa1
    JOIN 
        film_actor fa2 
        ON fa1.film_id = fa2.film_id 
        AND fa1.actor_id < fa2.actor_id
)
SELECT 
    actor1_id,
    actor2_id,
    film_id
FROM 
    ActorPairs
ORDER BY 
    film_id, actor1_id, actor2_id;

-- 
CREATE TABLE employees_ (
  emp_id INT PRIMARY KEY,
  emp_name VARCHAR(20) NOT NULL,
  age INT CHECK (age >= 18),
  email VARCHAR(30) UNIQUE,
  salary DECIMAL(10,2) DEFAULT 30000
);

--
#CONSTRAINTS HELP TO DEFINE DATA VALUES FOR PARTICULAR COLUMN AND LIMIT DATATYPE USE.
# NOT NULL, NULL UNQUIE DEFAULT, CHECK, PRIMARY KEY.

--
# NOT NULL IS APPLIED TO THE COLUMN SO THE DATA IN THAT COLUMN SHOULDN'T BE UNKNOWN OR EMPTY
# NO PRIMARY KEY  CAN'T CONTAIN NULL VALUES
#EXAMPLE VALUES IN PRIMARY KEY MUST BE THERE LIKE ID, ROLLNO, VEHICLE NO. EVERY VEHICLE HAS ONE ID WHICH IS COMPLUSORY.

--
# ALTER TABLE table_name
# MODIFY column_name new_datatype new_constraint.

-- 
CREATE TABLE products(
  product_id INT PRIMARY KEY,
  product_name VARCHAR(50),
  price DECIMAL (10,2) DEFAULT 50.00
);

--
CREATE TABLE students(
  student_id INT PRIMARY KEY,
  student_name VARCHAR(50),
  class_id INT
);

--
INSERT INTO students
VALUES
(1,'Alice',101),
(2,'Bob',102),
(3,'Charlie',101);

--
CREATE TABLE classes(
  class_id INT PRIMARY KEY,
  class_name VARCHAR(50)
);

--
INSERT INTO classes
VALUES
(101,' Math'),
(102,'Science'),
(103,'History');

--
CREATE TABLE Productss(
    products_id INT PRIMARY KEY,
    product_name VARCHAR(50),
    order_id INT
);

--
INSERT INTO Productss
VALUES
(101,'Laptop'),
(102,'Phone');

--
CREATE TABLE Sales(
    sale_id INT PRIMARY KEY,
    product_id INT,
    amount INT
);

-- 
CREATE TABLE product(
    product_id INT PRIMARY KEY,
    product_name VARCHAR(50)
);

--
INSERT INTO Sales
VALUES
(1,101,500),
(2,102,300),
(3,101,700);

--
SELECT * FROM Sales;

--
SELECT p.product_name, SUM(s.amount) AS total_sales
FROM Sales s
INNER JOIN product p
ON p.product_id = s.products_id
GROUP BY p.product_name;

--
CREATE TABLE orders (
  order_id INT PRIMARY KEY,
  order_date DATE,
  customer_id INT
);

INSERT INTO orders
VALUES
(1,'2024-01-02',1),
(2,'2024-01-05',2);

--
CREATE TABLE customer_(
  customer_id INT PRIMARY KEY,
  customer_name VARCHAR(20)
);

INSERT INTO customer_
VALUES
(1,'Alice'),
(2,'Bob');

--
CREATE TABLE orders_details (
  order_id INT,
  product_id INT,
  quantity INT
);

INSERT INTO orders_details
VALUES
(1,101,2),
(1,102,1),
(2,101,3);

--
SELECT o.order_id, c.customer_name, SUM(od.quantity) AS total_quantity
FROM orders o
INNER JOIN customer_ as c
ON c.customer_id = o.customer_id
INNER JOIN orders_details od
ON od.order_id = o.order_id
GROUP BY  c.customer_name
 ;
 
 
 --
#Primarykey is It is a column (or set of columns) in a table that uniquely identifies each row. (a unique id)
#A foreign key is a column (or set of columns) in a table that refers to the primary key in another table.

--
